// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	job "workuo/features/job"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateJobPost provides a mock function with given fields: data
func (_m *Service) CreateJobPost(data job.JobCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(job.JobCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJobPost provides a mock function with given fields: data
func (_m *Service) DeleteJobPost(data job.JobCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(job.JobCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetJobPost provides a mock function with given fields: data
func (_m *Service) GetJobPost(data job.JobCore) ([]job.JobCore, error) {
	ret := _m.Called(data)

	var r0 []job.JobCore
	if rf, ok := ret.Get(0).(func(job.JobCore) []job.JobCore); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]job.JobCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(job.JobCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobPostById provides a mock function with given fields: id
func (_m *Service) GetJobPostById(id int) (job.JobCore, error) {
	ret := _m.Called(id)

	var r0 job.JobCore
	if rf, ok := ret.Get(0).(func(int) job.JobCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(job.JobCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobPost provides a mock function with given fields: data
func (_m *Service) UpdateJobPost(data job.JobCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(job.JobCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
