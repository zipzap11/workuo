// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	recruiter "workuo/features/recruiter"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CheckRecruiter provides a mock function with given fields: data
func (_m *Repository) CheckRecruiter(data recruiter.RecruiterCore) (recruiter.RecruiterCore, error) {
	ret := _m.Called(data)

	var r0 recruiter.RecruiterCore
	if rf, ok := ret.Get(0).(func(recruiter.RecruiterCore) recruiter.RecruiterCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(recruiter.RecruiterCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(recruiter.RecruiterCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRecruiter provides a mock function with given fields: data
func (_m *Repository) CreateRecruiter(data recruiter.RecruiterCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(recruiter.RecruiterCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecruiterById provides a mock function with given fields: data
func (_m *Repository) GetRecruiterById(data recruiter.RecruiterCore) (recruiter.RecruiterCore, error) {
	ret := _m.Called(data)

	var r0 recruiter.RecruiterCore
	if rf, ok := ret.Get(0).(func(recruiter.RecruiterCore) recruiter.RecruiterCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(recruiter.RecruiterCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(recruiter.RecruiterCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecruiters provides a mock function with given fields:
func (_m *Repository) GetRecruiters() ([]recruiter.RecruiterCore, error) {
	ret := _m.Called()

	var r0 []recruiter.RecruiterCore
	if rf, ok := ret.Get(0).(func() []recruiter.RecruiterCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]recruiter.RecruiterCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
