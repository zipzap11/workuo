// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	user "workuo/features/user"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddUserSkillset provides a mock function with given fields: userId, skillsetId
func (_m *Repository) AddUserSkillset(userId int, skillsetId int) error {
	ret := _m.Called(userId, skillsetId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, skillsetId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckUser provides a mock function with given fields: data
func (_m *Repository) CheckUser(data user.UserCore) (user.UserCore, error) {
	ret := _m.Called(data)

	var r0 user.UserCore
	if rf, ok := ret.Get(0).(func(user.UserCore) user.UserCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(user.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.UserCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExperience provides a mock function with given fields: data
func (_m *Repository) CreateExperience(data user.ExperienceCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.ExperienceCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSkillset provides a mock function with given fields: data
func (_m *Repository) CreateSkillset(data user.SkillsetCore) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(user.SkillsetCore) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.SkillsetCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExperience provides a mock function with given fields: id
func (_m *Repository) DeleteExperience(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserSkillset provides a mock function with given fields: userId, skillsetId
func (_m *Repository) DeleteUserSkillset(userId int, skillsetId int) error {
	ret := _m.Called(userId, skillsetId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, skillsetId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetData provides a mock function with given fields: _a0
func (_m *Repository) GetData(_a0 user.UserCore) ([]user.UserCore, error) {
	ret := _m.Called(_a0)

	var r0 []user.UserCore
	if rf, ok := ret.Get(0).(func(user.UserCore) []user.UserCore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.UserCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.UserCore) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataById provides a mock function with given fields: id
func (_m *Repository) GetDataById(id int) (user.UserCore, error) {
	ret := _m.Called(id)

	var r0 user.UserCore
	if rf, ok := ret.Get(0).(func(int) user.UserCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(user.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *Repository) GetUserByEmail(email string) (bool, error) {
	ret := _m.Called(email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSkillsets provides a mock function with given fields: data
func (_m *Repository) GetUserSkillsets(data user.UserCore) ([]user.UserSkillsetCore, error) {
	ret := _m.Called(data)

	var r0 []user.UserSkillsetCore
	if rf, ok := ret.Get(0).(func(user.UserCore) []user.UserSkillsetCore); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.UserSkillsetCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.UserCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUserData provides a mock function with given fields: data
func (_m *Repository) InsertUserData(data user.UserCore) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(user.UserCore) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.UserCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExperience provides a mock function with given fields: data
func (_m *Repository) UpdateExperience(data user.ExperienceCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.ExperienceCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: data
func (_m *Repository) UpdateUser(data user.UserCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.UserCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserSkillset provides a mock function with given fields: userId, skillsetId, newSkillsetId
func (_m *Repository) UpdateUserSkillset(userId int, skillsetId int, newSkillsetId int) error {
	ret := _m.Called(userId, skillsetId, newSkillsetId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(userId, skillsetId, newSkillsetId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
