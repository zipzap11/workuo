// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	application "workuo/features/application"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AcceptApplication provides a mock function with given fields: _a0, _a1
func (_m *Service) AcceptApplication(_a0 int, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplyJob provides a mock function with given fields: _a0
func (_m *Service) ApplyJob(_a0 application.ApplicationCore) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(application.ApplicationCore) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetApplicationByID provides a mock function with given fields: _a0
func (_m *Service) GetApplicationByID(_a0 int) (application.ApplicationCore, error) {
	ret := _m.Called(_a0)

	var r0 application.ApplicationCore
	if rf, ok := ret.Get(0).(func(int) application.ApplicationCore); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(application.ApplicationCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationByJobID provides a mock function with given fields: _a0
func (_m *Service) GetApplicationByJobID(_a0 int) ([]application.ApplicationCore, error) {
	ret := _m.Called(_a0)

	var r0 []application.ApplicationCore
	if rf, ok := ret.Get(0).(func(int) []application.ApplicationCore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]application.ApplicationCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationByUserID provides a mock function with given fields: _a0
func (_m *Service) GetApplicationByUserID(_a0 int) ([]application.ApplicationCore, error) {
	ret := _m.Called(_a0)

	var r0 []application.ApplicationCore
	if rf, ok := ret.Get(0).(func(int) []application.ApplicationCore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]application.ApplicationCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationMultiParam provides a mock function with given fields: _a0, _a1
func (_m *Service) GetApplicationMultiParam(_a0 int, _a1 int) (application.ApplicationCore, error) {
	ret := _m.Called(_a0, _a1)

	var r0 application.ApplicationCore
	if rf, ok := ret.Get(0).(func(int, int) application.ApplicationCore); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(application.ApplicationCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectApplication provides a mock function with given fields: _a0, _a1
func (_m *Service) RejectApplication(_a0 int, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
